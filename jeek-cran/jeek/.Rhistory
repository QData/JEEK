data(nip_37_data)
label = colnames(nip_37_data[[1]])
result = jeek(X = nip_37_data, 0.005, covType = "cov", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
### multiple plotting
readline(prompt="Press [enter] to display four plots showing all graphs, shared graph, task specific 1 and task specific 2")
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.004, covType = "cov", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = exampleData, 0.05, covType = "cov", parallel = TRUE)
graph = returngraph.jeek(result)
layout = layout_nicely(graph,dim=2)
label = NULL
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = exampleData, 0.1, covType = "cov", parallel = TRUE)
graph = returngraph.jeek(result)
layout = layout_nicely(graph,dim=2)
label = NULL
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
graph = returngraph.jeek(result)
layout = layout_nicely(graph,dim=2)
label = NULL
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.05, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.3, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.7, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 1, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 2, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 10, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 5, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 3, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 100, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 50, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 3, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
par(mfrow=c(2,2))
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### load the example data
data(exampleData)
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
graph = returngraph.jeek(result)
layout = layout_nicely(graph,dim=2)
label = NULL
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
library(jeek)
demo(synthetic)
{
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", index = nodeid, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", subID = 0, index = nodeid, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=1, index = nodeid,
graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=2, index = nodeid,
graphlayout = layout)
}
### load cancer data (cancer)
data(cancer)
### run jeek
result = jeek(X = cancerlist, 3, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 30, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 3, covType = "cov", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 3, covType = "cor", parallel = TRUE)
### run jeek
result = jeek(X = cancerlist, 0.5, covType = "kendall", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.1, covType = "kendall", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.3, covType = "kendall", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.35, covType = "kendall", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
### run jeek
result = jeek(X = cancerlist, 0.25, covType = "kendall", parallel = TRUE)
### obtain names for node labelling
label = colnames(cancer[[1]])
### obtain graph for creating layout
graph = returngraph.jeek(result)
### create a fixed layout on cancergraph for plotting
layout = layout_nicely(graph,dim=2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
library(jeek)
demo(cancer)
library(jeek)
demo(word)
result = jeek(X = nip_37_data, 0.3, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.8, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 2, covType = "kendall", parallel = TRUE)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.01, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.1, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.15, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
result = jeek(X = nip_37_data, 0.12, covType = "kendall", parallel = TRUE)
# return igraph object
graph = returngraph.jeek(result)
# fix plot layout
layout = layout_nicely(graph, dim = 2)
{
plot.jeek(result, option = "2D", graphlabel = label, type="task", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="share", graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=1, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="taskspecific", subID=2, graphlayout = layout)
}
nodeid = which(label %in% c("data","probability")) ### look for id
{
plot.simule(result, option = "2D", graphlabel = label, type="neighbour", index = nodeid, graphlayout = layout)
plot.simule(result, option = "2D", graphlabel = label, type="neighbour", subID = 0, index = nodeid,graphlayout = layout)
plot.simule(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=1, index = nodeid,
graphlayout = layout)
plot.simule(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=2, index = nodeid,
graphlayout = layout)
}
{
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", index = nodeid, graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", subID = 0, index = nodeid,graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=1, index = nodeid,
graphlayout = layout)
plot.jeek(result, option = "2D", graphlabel = label, type="neighbour", neighbouroption = "taskspecific",
subID=2, index = nodeid,
graphlayout = layout)
}
library(jeek)
demo(jeek)
library(jeek)
demo(jeek)
demo(cancer)
demo(synthetic)
categorical_pal()
library(igraph)
categorical_pal(10)
library(jeek)
demo(jeek)
demo(cancer)
demo(synthetic)
demo(word)
convert_Rd_to_comment <-
function(file = NULL){
library('roxygen2')
library('Rd2roxygen')
options(roxygen.comment = "#' ")
rd.file = file
info <- parse_file(rd.file)
cat(create_roxygen(info), sep = "\n")
}
file = "E:/Github/JEEK/jeek-cran/jeek/man/jeek.Rd"
convert_Rd_to_comment(file)
library(jeek)
demo(jeek)
library(jeek)
demo(jeek)
demo(synthetic)
demo(cancer)
demo(word)
devtools::document()
devtools::document()
devtools::document()
getwd()
convert_Rd_to_comment("E:/Github/JEEK/jeek-cran/jeek/man/jeek-package.Rd")
devtools::document()
devtools::document()
library(jeek)
demO(jeek)
demo(jeek)
devtools::document()
library(jeek)
demo(jeek)
library(brainGraph)
library(jeek)
library(brainGraph)
demo(jeek)
library(jeek)
demo(jeek)
